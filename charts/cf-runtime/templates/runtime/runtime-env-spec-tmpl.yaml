{{- define "runtime.runtime-environment-spec.template" }}
{{- $cfCommonTplSemver := printf "cf-common-%s" (index .Subcharts "cf-common").Chart.Version -}}
{{- $kubeconfigFilePath := trimPrefix "system/" .Values.global.runtimeName -}}
{{- $name := trimPrefix "system/" .Values.global.runtimeName -}}
{{- $engineContext := .Values.runtime.engine -}}
{{- $dindContext := .Values.runtime.dind -}}
metadata:
  name: {{ include "runtime.runtime-environment-spec.name" . }}
  agent: {{ .Values.runtime.agent }}
extends: {{- toYaml .Values.runtime.runtimeExtends | nindent 2 }}
{{- with .Values.runtime.description }}
description: {{ . }}
{{- end }}
{{- if not .Values.runtime.agent }}
accounts: {{- toYaml .Values.runtime.accounts | nindent 2 }}
{{- end }}
runtimeScheduler:
  type: KubernetesPod
  {{- if $engineContext.image }}
  image: {{ include (printf "%s.image.name" $cfCommonTplSemver ) (dict "image" $engineContext.image "context" .) }}
  {{- end }}
  {{- with $engineContext.command }}
  command: {{- toYaml . | nindent 4 }}
  {{- end }}
  envVars:
  {{- with $engineContext.env }}
   {{- toYaml . | nindent 4 }}
  {{- end }}
    COMPOSE_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.COMPOSE_IMAGE) }}'
    CONTAINER_LOGGER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.CONTAINER_LOGGER_IMAGE) }}'
    DOCKER_BUILDER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.DOCKER_BUILDER_IMAGE) }}'
    DOCKER_PULLER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.DOCKER_PULLER_IMAGE) }}'
    DOCKER_PUSHER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.DOCKER_PUSHER_IMAGE) }}'
    DOCKER_TAG_PUSHER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.DOCKER_TAG_PUSHER_IMAGE) }}'
    FS_OPS_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.FS_OPS_IMAGE) }}'
    GIT_CLONE_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.GIT_CLONE_IMAGE) }}'
    KUBE_DEPLOY: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.KUBE_DEPLOY) }}'
    PIPELINE_DEBUGGER_IMAGE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.PIPELINE_DEBUGGER_IMAGE) }}'
    TEMPLATE_ENGINE: '{{ include "runtime.runtimeImageName" (dict "registry" .Values.global.imageRegisty "imageFullName" $engineContext.runtimeImages.TEMPLATE_ENGINE) }}'
  {{- with $engineContext.workflowLimits }}
  workflowLimits: {{ toYaml . | nindent 4 }}
  {{- end }}
  cluster:
    namespace: {{ .Release.Namespace }}
    serviceAccount: {{ $engineContext.serviceAccount }}
    {{- if .Values.runtime.agent }}
    clusterProvider:
      accountId: {{ .Values.global.accountId }}
      selector: {{ .Values.monitor.clusterId }}
    {{- else }}
      {{- if .Values.runtime.inCluster }}
    inCluster: true
    kubeconfigFilePath: null
      {{- else }}
    name: {{ $name }}
    kubeconfigFilePath: {{ printf "/etc/kubeconfig/%s" $kubeconfigFilePath }}
      {{- end }}
    {{- end }}
    {{- with $engineContext.nodeSelector }}
    nodeSelector: {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- with $engineContext.affinity }}
  affinity:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $engineContext.tolerations }}
  tolerations:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $engineContext.podAnnotations }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $engineContext.schedulerName }}
  schedulerName: {{ $engineContext.schedulerName }}
  {{- end }}
  resources:
  {{- if $engineContext.resources}}
  {{- toYaml $engineContext.resources | nindent 4 }}
  {{- end }}
dockerDaemonScheduler:
  type: DindKubernetesPod
  {{- if $dindContext.image }}
  dindImage: {{ include (printf "%s.image.name" $cfCommonTplSemver ) (dict "image" $dindContext.image "context" .) }}
  {{- end }}
  {{- with $dindContext.userAccess }}
  userAccess: {{ . }}
  {{- end }}
  {{- with $dindContext.env }}
  env: {{- toYaml . | nindent 4 }}
  {{- end }}
  cluster:
    namespace: {{ .Release.Namespace }}
    serviceAccount: {{ $dindContext.serviceAccount }}
    {{- if .Values.runtime.agent }}
    clusterProvider:
      accountId: {{ .Values.global.accountId }}
      selector: {{ .Values.monitor.clusterId }}
    {{- else }}
      {{- if .Values.runtime.inCluster }}
    inCluster: true
    kubeconfigFilePath: null
      {{- else }}
    name: {{ $name }}
    kubeconfigFilePath: {{ printf "/etc/kubeconfig/%s" $kubeconfigFilePath }}
      {{- end }}
    {{- end }}
    {{- with $dindContext.nodeSelector }}
    nodeSelector: {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- with $dindContext.affinity }}
  affinity:  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.tolerations }}
  tolerations: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.podAnnotations }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $dindContext.schedulerName }}
  schedulerName: {{ $dindContext.schedulerName }}
  {{- end }}
  {{- if $dindContext.pvcs }}
  pvcs: {{- include (printf "%v.tplrender" $cfCommonTplSemver) (dict "Values" $dindContext.pvcs "context" .) | nindent 4 }}
  {{- end }}
  defaultDindResources:
  {{- with $dindContext.resources }}
  {{- if not .requests }}
    limits: {{- toYaml .limits | nindent 6 }}
    requests: null
  {{- else }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}
  {{- with $dindContext.terminationGracePeriodSeconds }}
  terminationGracePeriodSeconds: {{ . }}
  {{- end }}
  {{- with $dindContext.userVolumeMounts }}
  userVolumeMounts: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $dindContext.userVolumes }}
  userVolumes: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if and (not .Values.runtime.agent)  }}
  clientCertPath: /etc/ssl/cf/
  volumeMounts:
    cf-certs-dind:
      name: cf-certs-dind
      mountPath: /etc/ssl/cf
      readOnly: false
  volumes:
    cf-certs-dind:
      name: cf-certs-dind
      secret:
        secretName: cf-certs-dind
  {{- end }}
{{- end }}