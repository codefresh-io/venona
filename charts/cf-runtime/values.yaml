# -- String to partially override cf-runtime.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override cf-runtime.fullname template
fullNameOverride: ""

# -- Global parameters
# @default -- See below
global:
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Global Docker registry secret names as array
  imagePullSecrets: []

  # -- URL of Codefresh Platform (required!)
  codefreshHost: "https://g.codefresh.io"
  # -- User token in plain text (required if `global.codefreshTokenSecretKeyRef` is omitted!)
  # Ref: https://g.codefresh.io/user/settings (see API Keys)
  codefreshToken: ""
  # -- User token that references an existing secret containing API key (required if `global.codefreshToken` is omitted!)
  codefreshTokenSecretKeyRef: {}

  # E.g.
  # codefreshTokenSecretKeyRef:
  #   name: my-codefresh-api-token
  #   key: codefresh-api-token

  # -- Account ID (required!)
  # Can be obtained here https://g.codefresh.io/2.0/account-settings/account-information
  accountId: ""

  # -- K8s context name (required!)
  context: ""
  # E.g.
  # context: prod-ue1-runtime-1

  # -- Agent Name (optional!)
  # If omitted, the following format will be used `{{ .Values.global.context }}_{{ .Release.Namespace }}`
  agentName: ""
  # E.g.
  # agentName: prod-ue1-runtime-1

  # -- Runtime name (optional!)
  # If omitted, the following format will be used `{{ .Values.global.context }}/{{ .Release.Namespace }}`
  runtimeName: ""
  # E.g.
  # runtimeName: prod-ue1-runtime-1/namespace

  # -- DEPRECATED Agent token in plain text.
  # !!! MUST BE provided if migrating from < 6.x chart version
  agentToken: ""
  # -- DEPRECATED Agent token that references an existing secret containing API key.
  # !!! MUST BE provided if migrating from < 6.x chart version
  agentTokenSecretKeyRef: {}
  # E.g.
  # agentTokenSecretKeyRef:
  #   name: my-codefresh-agent-secret
  #   key: codefresh-agent-token

# DEPRECATED -- Use `.Values.global.imageRegistry` instead
dockerRegistry: ""

# DEPRECATED -- Use `.Values.runtime` instead
re: {}

# -- Runner parameters
# @default -- See below
runner:
  # -- Enable the runner
  enabled: true
  # -- Set number of pods
  replicasCount: 1
  # -- Upgrade strategy
  updateStrategy:
    type: RollingUpdate
  # -- Set pod annotations
  podAnnotations: {}

  # -- Set image
  image:
    registry: quay.io
    repository: codefresh/venona
    tag: 1.10.1

  # -- Init container
  init:
    image:
      registry: quay.io
      repository: codefresh/cli
      tag: 0.85.0-rootless

    resources:
      limits:
        memory: 512Mi
        cpu: '1'
      requests:
        memory: 256Mi
        cpu: '0.2'

  # -- Sidecar container
  # Reconciles runtime spec from Codefresh API for drift detection
  sidecar:
    enabled: false
    image:
      registry: quay.io
      repository: codefresh/codefresh-shell
      tag: 0.0.2
    env:
      RECONCILE_INTERVAL: 300
    resources: {}

  # -- Add additional env vars
  env: {}

  # -- Service Account parameters
  serviceAccount:
    # -- Create service account
    create: true
    # -- Override service account name
    name: ""
    # -- Additional service account annotations
    annotations: {}

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Add custom rule to the role
    rules: []

  # -- Set security context for the pod
  # @default -- See below
  podSecurityContext:
    enabled: true
    runAsUser: 10001
    runAsGroup: 10001
    fsGroup: 10001

  # -- Readiness probe configuration
  # @default -- See below
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  # -- Set requests and limits
  resources: {}
  # -- Set node selector
  nodeSelector: {}
  # -- Set tolerations
  tolerations: []
  # -- Set affinity
  affinity: {}

# -- Volume Provisioner parameters
# @default -- See below
volumeProvisioner:
  # -- Enable volume-provisioner
  enabled: true
  # -- Set number of pods
  replicasCount: 1
  # -- Upgrade strategy
  updateStrategy:
    type: Recreate
  # -- Set pod annotations
  podAnnotations: {}

  # -- Set image
  image:
    registry: quay.io
    repository: codefresh/dind-volume-provisioner
    tag: 1.34.0
  # -- Add additional env vars
  env: {}

  # -- Service Account parameters
  serviceAccount:
    # -- Create service account
    create: true
    # -- Override service account name
    name: ""
    # -- Additional service account annotations
    annotations: {}
    # E.g.
    #   serviceAccount:
    #     annotations:
    #       eks.amazonaws.com/role-arn: "arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE_NAME>"

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Add custom rule to the role
    rules: []

  # -- Set security context for the pod
  # @default -- See below
  podSecurityContext:
    enabled: true
    runAsUser: 3000
    runAsGroup: 3000
    fsGroup: 3000

  # -- Set node selector
  nodeSelector: {}
  # -- Set resources
  resources: {}
  # -- Set tolerations
  tolerations: []
  # -- Set affinity
  affinity: {}

  # -- `dind-lv-monitor` DaemonSet parameters
  # (local volumes cleaner)
  # @default -- See below
  dind-lv-monitor:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/dind-volume-utils
      tag: 1.29.4
    podAnnotations: {}
    podSecurityContext:
      enabled: true
      runAsUser: 1000
      fsGroup: 1000
    containerSecurityContext: {}
    env: {}
    resources: {}
    nodeSelector: {}
    tolerations:
    - key: 'codefresh/dind'
      operator: 'Exists'
      effect: 'NoSchedule'
    volumePermissions:
      enabled: true
      image:
        registry: docker.io
        repository: alpine
        tag: 3.18
      resources: {}
      securityContext:
        runAsUser: 0 # auto

  # `dind-volume-cleanup` CronJob parameters
  # (external volumes cleaner)
  # @default -- See below
  dind-volume-cleanup:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/dind-volume-cleanup
      tag: 1.2.0
    env: {}
    concurrencyPolicy: Forbid
    schedule: "*/10 * * * *"
    successfulJobsHistory: 3
    failedJobsHistory: 1
    suspend: false
    podAnnotations: {}
    podSecurityContext:
      enabled: true
      fsGroup: 3000
      runAsGroup: 3000
      runAsUser: 3000
    nodeSelector: {}
    affinity: {}
    tolerations: []

# Storage parameters for volume-provisioner
# @default -- See below
storage:
  # -- Set backend volume type (`local`/`ebs`/`ebs-csi`/`gcedisk`/`azuredisk`)
  backend: local
  # -- Set filesystem type (`ext4`/`xfs`)
  fsType: "ext4"

  # Storage parametrs example for local volumes on the K8S nodes filesystem (i.e. `storage.backend=local`)
  # https://kubernetes.io/docs/concepts/storage/volumes/#local
  # @default -- See below
  local:
    # -- Set volume path on the host filesystem
    volumeParentDir: /var/lib/codefresh/dind-volumes

  # Storage parameters example for aws ebs disks (i.e. `storage.backend=ebs`/`storage.backend=ebs-csi`)
  # https://aws.amazon.com/ebs/
  # https://codefresh.io/docs/docs/installation/codefresh-runner/#aws-backend-volume-configuration
  # @default -- See below
  ebs:
    # -- Set EBS volume type (`gp2`/`gp3`/`io1`) (required)
    volumeType: "gp2"
    # -- Set EBS volumes availability zone (required)
    availabilityZone: "us-east-1a"
    # -- Enable encryption (optional)
    encrypted: "false"
    # -- Set KMS encryption key ID (optional)
    kmsKeyId: ""

    # -- Set AWS_ACCESS_KEY_ID for volume-provisioner (optional)
    # Ref: https://codefresh.io/docs/docs/installation/codefresh-runner/#dind-volume-provisioner-permissions
    accessKeyId: ""
    # -- Existing secret containing AWS_ACCESS_KEY_ID.
    accessKeyIdSecretKeyRef: {}
    # E.g.
    # accessKeyIdSecretKeyRef:
    #   name:
    #   key:

    # -- Set AWS_SECRET_ACCESS_KEY for volume-provisioner (optional)
    # Ref: https://codefresh.io/docs/docs/installation/codefresh-runner/#dind-volume-provisioner-permissions
    secretAccessKey: ""
    # -- Existing secret containing AWS_SECRET_ACCESS_KEY
    secretAccessKeySecretKeyRef: {}
    # E.g.
    # secretAccessKeySecretKeyRef:
    #   name:
    #   key:

    # E.g.
    # ebs:
    #   volumeType: gp3
    #   availabilityZone: us-east-1c
    #   encrypted: false
    #   iops: "5000"
    #   # I/O operations per second. Only effetive when gp3 volume type is specified.
    #   # Default value - 3000.
    #   # Max - 16,000
    #   throughput: "500"
    #   # Throughput in MiB/s. Only effective when gp3 volume type is specified.
    #   # Default value - 125.
    #   # Max - 1000.
    # ebs:
    #   volumeType: gp2
    #   availabilityZone: us-east-1c
    #   encrypted: true
    #   kmsKeyId: "1234abcd-12ab-34cd-56ef-1234567890ab"
    #   accessKeyId: "MYKEYID"
    #   secretAccessKey: "MYACCESSKEY"

  # Storage parameters example for gce disks
  # https://cloud.google.com/compute/docs/disks#pdspecs
  # https://codefresh.io/docs/docs/installation/codefresh-runner/#gke-google-kubernetes-engine-backend-volume-configuration
  # @default -- See below
  gcedisk:
    # -- Set GCP volume backend type (`pd-ssd`/`pd-standard`)
    volumeType: "pd-ssd"
    # -- Set GCP volume availability zone
    availabilityZone: "us-west1-a"
    # -- Set Google SA JSON key for volume-provisioner (optional)
    serviceAccountJson: ""
    # -- Existing secret containing containing Google SA JSON key for volume-provisioner (optional)
    serviceAccountJsonSecretKeyRef: {}
    # E.g.
    # gcedisk:
    #   volumeType: pd-ssd
    #   availabilityZone: us-central1-c
    #   serviceAccountJson: |-
    #          {
    #           "type": "service_account",
    #           "project_id": "...",
    #           "private_key_id": "...",
    #           "private_key": "...",
    #           "client_email": "...",
    #           "client_id": "...",
    #           "auth_uri": "...",
    #           "token_uri": "...",
    #           "auth_provider_x509_cert_url": "...",
    #           "client_x509_cert_url": "..."
    #           }

  # Storage parameters example for Azure Disks
  # https://codefresh.io/docs/docs/installation/codefresh-runner/#install-codefresh-runner-on-azure-kubernetes-service-aks
  # @default -- See below
  azuredisk:
    # -- Set storage type (`Premium_LRS`)
    skuName: Premium_LRS
    cachingMode: None
    # location: westcentralus
    # resourceGroup:
    # DiskIOPSReadWrite: 500
    # DiskMBpsReadWrite: 100

  mountAzureJson: false

# -- Set runtime parameters
# @default -- See below

runtime:
  # -- Set annotation on engine Service Account
  # Ref: https://codefresh.io/docs/docs/administration/codefresh-runner/#injecting-aws-arn-roles-into-the-cluster
  serviceAccount:
    create: true
    annotations: {}
    # E.g.
    #   serviceAccount:
    #     annotations:
    #       eks.amazonaws.com/role-arn: "arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE_NAME>"

  # -- Set parent runtime to inherit.
  # Should not be changes. Parent runtime is controlled from Codefresh side.
  runtimeExtends:
    - system/default/hybrid/k8s_low_limits
  # -- Runtime description
  description: ""

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Add custom rule to the engine role
    rules: []

  # -- (for On-Premise only) Enable agent
  agent: true
  # -- (for On-Premise only) Set inCluster runtime
  inCluster: true
  # -- (for On-Premise only) Assign accounts to runtime (list of account ids)
  accounts: []

  # -- Parameters for DinD (docker-in-docker) pod (aka "runtime" pod).
  dind:
    # -- Set dind image.
    image:
      registry: quay.io
      repository: codefresh/dind
      tag: 20.10.24-1.27.0  # use `latest-rootless/rootless/20.10.24-1.27.0-rootless` tags for rootless-dind
    # -- Set dind resources.
    resources:
      requests: null
      limits:
        cpu: 400m
        memory: 800Mi
    # -- PV claim spec parametes.
    pvcs:
      # -- Default dind PVC parameters
      dind:
        # -- PVC name prefix.
        # Keep `dind` as default! Don't change!
        name: dind
        # -- PVC storage class name.
        # Change ONLY if you need to use storage class NOT from Codefresh volume-provisioner
        storageClassName: '{{ include "dind-volume-provisioner.storageClassName" . }}'
        # -- PVC size.
        volumeSize: 16Gi
        # -- PV reuse selector.
        # Ref: https://codefresh.io/docs/docs/installation/codefresh-runner/#volume-reuse-policy
        reuseVolumeSelector: codefresh-app,io.codefresh.accountName
        reuseVolumeSortOrder: pipeline_id
    # -- Set additional env vars.
    env: {}
    # -- Set pod annotations.
    podAnnotations: {}
    # -- Set node selector.
    nodeSelector: {}
    # -- Set affinity
    affinity: {}
    # -- Set tolerations.
    tolerations: []
    # -- Set scheduler name.
    schedulerName: ""
    # -- Set service account for pod.
    serviceAccount: codefresh-engine
    # -- Keep `true` as default!
    userAccess: true
    # -- Add extra volumes
    userVolumes: {}
    # E.g.:
    # userVolumes:
    #   regctl-docker-registry:
    #     name: regctl-docker-registry
    #     secret:
    #       items:
    #         - key: .dockerconfigjson
    #           path: config.json
    #       secretName: regctl-docker-registry
    #       optional: true
    # -- Add extra volume mounts
    userVolumeMounts: {}
    # E.g.:
    # userVolumeMounts:
    #   regctl-docker-registry:
    #     name: regctl-docker-registry
    #     mountPath: /home/appuser/.docker/
    #     readOnly: true

  # -- Parameters for Engine pod (aka "pipeline" orchestrator).
  engine:
    # -- Set image.
    image:
      registry: quay.io
      repository: codefresh/engine
      tag: 1.165.2
    # -- Set container command.
    command:
      - npm
      - run
      - start
    # -- Set resources.
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 1000m
        memory: 2048Mi
    # -- Set system(base) runtime images.
    # @default -- See below.
    runtimeImages:
      COMPOSE_IMAGE: quay.io/codefresh/compose:v2.20.3-1.4.0
      CONTAINER_LOGGER_IMAGE: quay.io/codefresh/cf-container-logger:1.10.3
      DOCKER_BUILDER_IMAGE: quay.io/codefresh/cf-docker-builder:1.3.6
      DOCKER_PULLER_IMAGE: quay.io/codefresh/cf-docker-puller:8.0.14
      DOCKER_PUSHER_IMAGE: quay.io/codefresh/cf-docker-pusher:6.0.13
      DOCKER_TAG_PUSHER_IMAGE: quay.io/codefresh/cf-docker-tag-pusher:1.3.11
      FS_OPS_IMAGE: quay.io/codefresh/fs-ops:1.2.3
      GIT_CLONE_IMAGE: quay.io/codefresh/cf-git-cloner:10.1.21
      KUBE_DEPLOY: quay.io/codefresh/cf-deploy-kubernetes:16.1.11
      PIPELINE_DEBUGGER_IMAGE: quay.io/codefresh/cf-debugger:1.3.0
      TEMPLATE_ENGINE: quay.io/codefresh/pikolo:0.13.8
    # -- Set additional env vars.
    env: {}
    # -- Set pod annotations.
    podAnnotations: {}
    # -- Set node selector.
    nodeSelector: {}
    # -- Set affinity
    affinity: {}
    # -- Set tolerations.
    tolerations: []
    # -- Set scheduler name.
    schedulerName: ""
    # -- Set service account for pod.
    serviceAccount: codefresh-engine
    # -- Set extra env vars
    userEnvVars: []
    # E.g.
    # userEnvVars:
    # - name: GITHUB_TOKEN
    #   valueFrom:
    #     secretKeyRef:
    #       name: github-token
    #       key: token

  # -- Parameters for `runtime-patch` post-upgrade/install hook
  # @default -- See below
  patch:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/cli
      tag: 0.85.0-rootless
    rbac:
      enabled: true
    annotations: {}
    affinity: {}
    nodeSelector: {}
    podSecurityContext: {}
    resources: {}
    tolerations: []
    ttlSecondsAfterFinished: 180
    env:
      HOME: /tmp

  # -- Parameters for `gencerts-dind` post-upgrade/install hook
  # @default -- See below
  gencerts:
    enabled: true
    image:
      registry: quay.io
      repository: codefresh/kubectl
      tag: 1.27.2
    rbac:
      enabled: true
    annotations: {}
    affinity: {}
    nodeSelector: {}
    podSecurityContext: {}
    resources: {}
    tolerations: []
    ttlSecondsAfterFinished: 180

  # -- DinD pod daemon config
  # @default -- See below
  dindDaemon:
    hosts:
      - unix:///var/run/docker.sock
      - tcp://0.0.0.0:1300
    tlsverify: true
    tls: true
    tlscacert: /etc/ssl/cf-client/ca.pem
    tlscert: /etc/ssl/cf/server-cert.pem
    tlskey: /etc/ssl/cf/server-key.pem
    insecure-registries:
      - 192.168.99.100:5000
    metrics-addr: 0.0.0.0:9323
    experimental: true

# App-Proxy parameters
# Ref: https://codefresh.io/docs/docs/installation/codefresh-runner/#app-proxy-installation
# @default -- See below
appProxy:
  # -- Enable app-proxy
  enabled: false
  # -- Set number of pods
  replicasCount: 1
  # -- Upgrade strategy
  updateStrategy:
    type: RollingUpdate
  # -- Set pod annotations
  podAnnotations: {}

  # -- Set image
  image:
    registry: quay.io
    repository: codefresh/cf-app-proxy
    tag: latest
  # -- Add additional env vars
  env: {}

  # Set app-proxy ingress parameters
  # @default -- See below
  ingress:
    # -- Set path prefix for ingress
    pathPrefix: "/"
    # -- Set ingress class
    class: ""
    # -- Set DNS hostname the ingress will use
    host: ""
    # -- Set k8s tls secret for the ingress object
    tlsSecret: ""
    # -- Set extra annotations for ingress object
    annotations: {}
    # E.g.
    # ingress:
    #   pathPrefix: "/app-proxy"
    #   class: "nginx"
    #   host: "mydomain.com"
    #   tlsSecret: "tls-cert-app-proxy"
    #   annotations:
    #     nginx.ingress.kubernetes.io/whitelist-source-range: 123.123.123.123/130

  # -- Service Account parameters
  serviceAccount:
    # -- Create service account
    create: true
    # -- Override service account name
    name: ""
    # -- Use Role(true)/ClusterRole(true)
    namespaced: true
    # -- Additional service account annotations
    annotations: {}

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Use Role(true)/ClusterRole(true)
    namespaced: true
    # -- Add custom rule to the role
    rules: []

  # -- Set security context for the pod
  podSecurityContext: {}

  # -- Readiness probe configuration
  # @default -- See below
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  # -- Set requests and limits
  resources: {}
  # -- Set node selector
  nodeSelector: {}
  # -- Set tolerations
  tolerations: []
  # -- Set affinity
  affinity: {}

# Monitor parameters
# @default -- See below
monitor:
  # -- Enable monitor
  # Ref: https://codefresh.io/docs/docs/installation/codefresh-runner/#install-monitoring-component
  enabled: false

  # -- Set number of pods
  replicasCount: 1
  # -- Upgrade strategy
  updateStrategy:
    type: RollingUpdate
  # -- Set pod annotations
  podAnnotations: {}

  # -- Set image
  image:
    registry: quay.io
    repository: codefresh/agent
    tag: stable
  # -- Add additional env vars
  env: {}

  # -- Service Account parameters
  serviceAccount:
    # -- Create service account
    create: true
    # -- Override service account name
    name: ""
    # -- Additional service account annotations
    annotations: {}

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Use Role(true)/ClusterRole(true)
    namespaced: true
    # -- Add custom rule to the role
    rules: []

  # -- Readiness probe configuration
  # @default -- See below
  readinessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  podSecurityContext: {}

  # -- Set node selector
  nodeSelector: {}
  # -- Set resources
  resources: {}
  # -- Set tolerations
  tolerations: []
  # -- Set affinity
  affinity: {}

# -- Add serviceMonitor
# @default -- See below
serviceMonitor:
  main:
    # -- Enable service monitor for dind pods
    enabled: false
    nameOverride: dind
    selector:
      matchLabels:
        app: dind
    endpoints:
    - path: /metrics
      targetPort: 9100
      relabelings:
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)

# -- Add podMonitor (for engine pods)
# @default -- See below
podMonitor:
  main:
    # -- Enable pod monitor for engine pods
    enabled: false
    nameOverride: engine
    selector:
      matchLabels:
        app: runtime
    podMetricsEndpoints:
    - path: /metrics
      targetPort: 9100

  runner:
    # -- Enable pod monitor for runner pod
    enabled: false
    nameOverride: runner
    selector:
      matchLabels:
        codefresh.io/application: runner
    podMetricsEndpoints:
    - path: /metrics
      targetPort: 8080

  volume-provisioner:
    # -- Enable pod monitor for volumeProvisioner pod
    enabled: false
    nameOverride: volume-provisioner
    selector:
      matchLabels:
        codefresh.io/application: volume-provisioner
    podMetricsEndpoints:
    - path: /metrics
      targetPort: 8080

# -- Event exporter parameters
# @default -- See below
event-exporter:
  # -- Enable event-exporter
  enabled: false
  # -- Set number of pods
  replicasCount: 1
  # -- Upgrade strategy
  updateStrategy:
    type: Recreate
  # -- Set pod annotations
  podAnnotations: {}

  # -- Set image
  image:
    registry: docker.io
    repository: codefresh/k8s-event-exporter
    tag: latest
  # -- Add additional env vars
  env: {}

  # -- Service Account parameters
  serviceAccount:
    # -- Create service account
    create: true
    # -- Override service account name
    name: ""
    # -- Additional service account annotations
    annotations: {}

  # -- RBAC parameters
  rbac:
    # -- Create RBAC resources
    create: true
    # -- Add custom rule to the role
    rules: []

  # -- Set security context for the pod
  # @default -- See below
  podSecurityContext:
    enabled: false

  # -- Set node selector
  nodeSelector: {}
  # -- Set resources
  resources: {}
  # -- Set tolerations
  tolerations: []
  # -- Set affinity
  affinity: {}

# -- Array of extra objects to deploy with the release
extraResources: []
# E.g.
# extraResources:
# - apiVersion: rbac.authorization.k8s.io/v1
#   kind: ClusterRole
#   metadata:
#     name: codefresh-role
#   rules:
#     - apiGroups: [ "*"]
#       resources: ["*"]
#       verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# - apiVersion: v1
#   kind: ServiceAccount
#   metadata:
#     name: codefresh-user
#     namespace: "{{ .Release.Namespace }}"
# - apiVersion: rbac.authorization.k8s.io/v1
#   kind: ClusterRoleBinding
#   metadata:
#     name: codefresh-user
#   roleRef:
#     apiGroup: rbac.authorization.k8s.io
#     kind: ClusterRole
#     name: codefresh-role
#   subjects:
#   - kind: ServiceAccount
#     name: codefresh-user
#     namespace: "{{ .Release.Namespace }}"
# - apiVersion: v1
#   kind: Secret
#   type: kubernetes.io/service-account-token
#   metadata:
#     name: codefresh-user-token
#     namespace: "{{ .Release.Namespace }}"
#     annotations:
#       kubernetes.io/service-account.name: "codefresh-user"
