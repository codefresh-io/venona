appProxy:
  enabled: false
  image: "quay.io/codefresh/cf-app-proxy:latest" # default app-proxy image
  env: { }  # add env vars to app-proxy deployment
  ## e.g.:
  ## env:
  ##   LOG_LEVEL: debug
  ingress:
    pathPrefix: ""          # default is '/'. Use this if you share the hostname with other services
    class: ""               # If you have multiple ingress-controllers in the cluster - specify the right ingress class
    host: ""                # The DNS hostname the ingress will use
    tlsSecret: ""           # Specify TLS certs k8s secret for the ingress
    ingressApiVersion: ""   # for k8s 1.22+ specify 'networking.k8s.io/v1' as ingress object API version, skip otherwise
    annotations: { }        # Extra annotations that will be set on the ingress object
    ## e.g:
    ## annotations:
    ##   nginx.ingress.kubernetes.io/whitelist-source-range: 123.123.123.123/130

newRelicLicense: ""
dockerRegistry: ""

monitor:
  image: "quay.io/codefresh/agent:stable"
  clusterId: ""
  enabled: false
  helm3: false
  token: ""
  env: { }

re: { }
  # Optionally add an AWS IAM role to your pipelines
  # More info: https://codefresh.io/docs/docs/administration/codefresh-runner/#injecting-aws-arn-roles-into-the-cluster
  # serviceAccount:
  #   annotations:   # will be set on codefresh-engine service account
  #     foo: bar
  #     eks.amazonaws.com/role-arn: "arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE_NAME>"

venona:
  image: "quay.io/codefresh/venona:1.7.1"

volumeProvisioner:
  resources:
  image: "quay.io/codefresh/dind-volume-provisioner:1.31.2"
  mountAzureJson: ""
  # serviceAccount:
  #   annotations:   # will be set on VolumeProvisioner service account
  #     foo: bar
  #     eks.amazonaws.com/role-arn: "arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE_NAME>"
  createDindVolDirResouces:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
#todo add envvars

storage:
  backend: local # local/ebs/gce/azure

  local:
    volumeParentDir: /var/lib/codefresh/dind-volumes

  gce:
    volumeType: ""
    availabilityZone: ""
    serviceAccountJson: ""

  ebs:
    volumeType: "" # gp2/gp3/io1
    availabilityZone: "" # us-east-1c
    encrypted: "" # true/false
    kmsKeyId: ""
    accessKeyId: ""
    secretAccessKey: ""

  azure:
    resourceGroup: ""
    location: ""
    cachingMode: ""
    skuName: ""

  fsType: "ext4"

  #     resources:
  #       limits:
  #         cpu: 400m
  #         memory: 1200Mi
  #       requests:
  #         cpu: 200m
  #         memory: 500Mi

###NodeSelector --kube-node-selector: controls runner(vp-venona), dind-volume-provisioner(vp-provisioner), vp-monitor pods
#nodeSelector: {"kubernetes.io/arch": "amd64", "failure-domain.beta.kubernetes.io/zone": "us-east-1c"}

### Tolerations --tolerations: controls runner(vp-venona), dind-volume-provisioner(vp-provisioner), vp-monitor pods
# tolerations: 
# - key: <key>
#   operator: Equal
#   value: <value>
#   effect: NoSchedule

global:
  namespace: ""
  codefreshHost: ""
  agentToken: ""
  agentId: ""
  agentName: ""
  accountId: ""
  runtimeName: ""
  keys:
    key: ""
    csr: ""
    ca: ""
    serverCert: ""
