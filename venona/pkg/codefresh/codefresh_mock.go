// Copyright 2023 The Codefresh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.33.1. DO NOT EDIT.

package codefresh

import (
	context "context"

	task "github.com/codefresh-io/go/venona/pkg/task"
	mock "github.com/stretchr/testify/mock"
)

// MockCodefresh is an autogenerated mock type for the Codefresh type
type MockCodefresh struct {
	mock.Mock
}

type MockCodefresh_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodefresh) EXPECT() *MockCodefresh_Expecter {
	return &MockCodefresh_Expecter{mock: &_m.Mock}
}

// Host provides a mock function with given fields:
func (_m *MockCodefresh) Host() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockCodefresh_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type MockCodefresh_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *MockCodefresh_Expecter) Host() *MockCodefresh_Host_Call {
	return &MockCodefresh_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *MockCodefresh_Host_Call) Run(run func()) *MockCodefresh_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCodefresh_Host_Call) Return(_a0 string) *MockCodefresh_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodefresh_Host_Call) RunAndReturn(run func() string) *MockCodefresh_Host_Call {
	_c.Call.Return(run)
	return _c
}

// ReportStatus provides a mock function with given fields: ctx, status
func (_m *MockCodefresh) ReportStatus(ctx context.Context, status AgentStatus) error {
	ret := _m.Called(ctx, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AgentStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCodefresh_ReportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportStatus'
type MockCodefresh_ReportStatus_Call struct {
	*mock.Call
}

// ReportStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status AgentStatus
func (_e *MockCodefresh_Expecter) ReportStatus(ctx interface{}, status interface{}) *MockCodefresh_ReportStatus_Call {
	return &MockCodefresh_ReportStatus_Call{Call: _e.mock.On("ReportStatus", ctx, status)}
}

func (_c *MockCodefresh_ReportStatus_Call) Run(run func(ctx context.Context, status AgentStatus)) *MockCodefresh_ReportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AgentStatus))
	})
	return _c
}

func (_c *MockCodefresh_ReportStatus_Call) Return(_a0 error) *MockCodefresh_ReportStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodefresh_ReportStatus_Call) RunAndReturn(run func(context.Context, AgentStatus) error) *MockCodefresh_ReportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Tasks provides a mock function with given fields: ctx
func (_m *MockCodefresh) Tasks(ctx context.Context) (task.Tasks, error) {
	ret := _m.Called(ctx)

	var r0 task.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (task.Tasks, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) task.Tasks); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(task.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodefresh_Tasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tasks'
type MockCodefresh_Tasks_Call struct {
	*mock.Call
}

// Tasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCodefresh_Expecter) Tasks(ctx interface{}) *MockCodefresh_Tasks_Call {
	return &MockCodefresh_Tasks_Call{Call: _e.mock.On("Tasks", ctx)}
}

func (_c *MockCodefresh_Tasks_Call) Run(run func(ctx context.Context)) *MockCodefresh_Tasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCodefresh_Tasks_Call) Return(_a0 task.Tasks, _a1 error) *MockCodefresh_Tasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodefresh_Tasks_Call) RunAndReturn(run func(context.Context) (task.Tasks, error)) *MockCodefresh_Tasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCodefresh creates a new instance of MockCodefresh. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodefresh(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodefresh {
	mock := &MockCodefresh{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
