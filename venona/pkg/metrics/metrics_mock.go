// Copyright 2023 The Codefresh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.32.0. DO NOT EDIT.

package metrics

import (
	task "github.com/codefresh-io/go/venona/pkg/task"
	mock "github.com/stretchr/testify/mock"

	time "time"

	workflow "github.com/codefresh-io/go/venona/pkg/workflow"
)

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// ObserveAgentTaskMetrics provides a mock function with given fields: t, agentType
func (_m *MockMetrics) ObserveAgentTaskMetrics(t *task.Task, agentType string) {
	_m.Called(t, agentType)
}

// MockMetrics_ObserveAgentTaskMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveAgentTaskMetrics'
type MockMetrics_ObserveAgentTaskMetrics_Call struct {
	*mock.Call
}

// ObserveAgentTaskMetrics is a helper method to define mock.On call
//   - t *task.Task
//   - agentType string
func (_e *MockMetrics_Expecter) ObserveAgentTaskMetrics(t interface{}, agentType interface{}) *MockMetrics_ObserveAgentTaskMetrics_Call {
	return &MockMetrics_ObserveAgentTaskMetrics_Call{Call: _e.mock.On("ObserveAgentTaskMetrics", t, agentType)}
}

func (_c *MockMetrics_ObserveAgentTaskMetrics_Call) Run(run func(t *task.Task, agentType string)) *MockMetrics_ObserveAgentTaskMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*task.Task), args[1].(string))
	})
	return _c
}

func (_c *MockMetrics_ObserveAgentTaskMetrics_Call) Return() *MockMetrics_ObserveAgentTaskMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveAgentTaskMetrics_Call) RunAndReturn(run func(*task.Task, string)) *MockMetrics_ObserveAgentTaskMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ObserveGetTasks provides a mock function with given fields: start
func (_m *MockMetrics) ObserveGetTasks(start time.Time) {
	_m.Called(start)
}

// MockMetrics_ObserveGetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveGetTasks'
type MockMetrics_ObserveGetTasks_Call struct {
	*mock.Call
}

// ObserveGetTasks is a helper method to define mock.On call
//   - start time.Time
func (_e *MockMetrics_Expecter) ObserveGetTasks(start interface{}) *MockMetrics_ObserveGetTasks_Call {
	return &MockMetrics_ObserveGetTasks_Call{Call: _e.mock.On("ObserveGetTasks", start)}
}

func (_c *MockMetrics_ObserveGetTasks_Call) Run(run func(start time.Time)) *MockMetrics_ObserveGetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockMetrics_ObserveGetTasks_Call) Return() *MockMetrics_ObserveGetTasks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveGetTasks_Call) RunAndReturn(run func(time.Time)) *MockMetrics_ObserveGetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ObserveK8sMetrics provides a mock function with given fields: taskType, namespace, name, start
func (_m *MockMetrics) ObserveK8sMetrics(taskType task.Type, namespace string, name string, start time.Time) {
	_m.Called(taskType, namespace, name, start)
}

// MockMetrics_ObserveK8sMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveK8sMetrics'
type MockMetrics_ObserveK8sMetrics_Call struct {
	*mock.Call
}

// ObserveK8sMetrics is a helper method to define mock.On call
//   - taskType task.Type
//   - namespace string
//   - name string
//   - start time.Time
func (_e *MockMetrics_Expecter) ObserveK8sMetrics(taskType interface{}, namespace interface{}, name interface{}, start interface{}) *MockMetrics_ObserveK8sMetrics_Call {
	return &MockMetrics_ObserveK8sMetrics_Call{Call: _e.mock.On("ObserveK8sMetrics", taskType, namespace, name, start)}
}

func (_c *MockMetrics_ObserveK8sMetrics_Call) Run(run func(taskType task.Type, namespace string, name string, start time.Time)) *MockMetrics_ObserveK8sMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(task.Type), args[1].(string), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockMetrics_ObserveK8sMetrics_Call) Return() *MockMetrics_ObserveK8sMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveK8sMetrics_Call) RunAndReturn(run func(task.Type, string, string, time.Time)) *MockMetrics_ObserveK8sMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ObserveWorkflowMetrics provides a mock function with given fields: wf
func (_m *MockMetrics) ObserveWorkflowMetrics(wf *workflow.Workflow) {
	_m.Called(wf)
}

// MockMetrics_ObserveWorkflowMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveWorkflowMetrics'
type MockMetrics_ObserveWorkflowMetrics_Call struct {
	*mock.Call
}

// ObserveWorkflowMetrics is a helper method to define mock.On call
//   - wf *workflow.Workflow
func (_e *MockMetrics_Expecter) ObserveWorkflowMetrics(wf interface{}) *MockMetrics_ObserveWorkflowMetrics_Call {
	return &MockMetrics_ObserveWorkflowMetrics_Call{Call: _e.mock.On("ObserveWorkflowMetrics", wf)}
}

func (_c *MockMetrics_ObserveWorkflowMetrics_Call) Run(run func(wf *workflow.Workflow)) *MockMetrics_ObserveWorkflowMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.Workflow))
	})
	return _c
}

func (_c *MockMetrics_ObserveWorkflowMetrics_Call) Return() *MockMetrics_ObserveWorkflowMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_ObserveWorkflowMetrics_Call) RunAndReturn(run func(*workflow.Workflow)) *MockMetrics_ObserveWorkflowMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQueueSize provides a mock function with given fields: agentTasks, wfTasks, queue
func (_m *MockMetrics) UpdateQueueSize(agentTasks int, wfTasks int, queue int) {
	_m.Called(agentTasks, wfTasks, queue)
}

// MockMetrics_UpdateQueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQueueSize'
type MockMetrics_UpdateQueueSize_Call struct {
	*mock.Call
}

// UpdateQueueSize is a helper method to define mock.On call
//   - agentTasks int
//   - wfTasks int
//   - queue int
func (_e *MockMetrics_Expecter) UpdateQueueSize(agentTasks interface{}, wfTasks interface{}, queue interface{}) *MockMetrics_UpdateQueueSize_Call {
	return &MockMetrics_UpdateQueueSize_Call{Call: _e.mock.On("UpdateQueueSize", agentTasks, wfTasks, queue)}
}

func (_c *MockMetrics_UpdateQueueSize_Call) Run(run func(agentTasks int, wfTasks int, queue int)) *MockMetrics_UpdateQueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockMetrics_UpdateQueueSize_Call) Return() *MockMetrics_UpdateQueueSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_UpdateQueueSize_Call) RunAndReturn(run func(int, int, int)) *MockMetrics_UpdateQueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
