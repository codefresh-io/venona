version: '1.0'
mode: parallel
stages:
- Test
- Build Artifacts
- Security scan
- Push
steps:

  main_clone:
    stage: Test
    title: Clone repository
    type: git-clone
    repo: https://github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}
    credentials:
      username: github
      password: ${{secrets.hybrid.git}}

  download_dependencies: &deps
    title: Download Dependencies
    stage: Test
    image: quay.io/codefresh/venona-tester:latest
    environment:
    - GO111MODULE=on
    - GOSUMDB=off
    - GOPROXY=direct
    - GOCACHE=/codefresh/volume/gocache
    - GOPATH=/codefresh/volume/gopath
    commands:
      - cd venona && go mod download
    when:
      steps:
      - name: main_clone
        on:
        - success

  test: &common
    <<: *deps
    title: Run tests
    commands:
      - cd venona && make test
    when:
      steps:
      - name: download_dependencies
        on:
        - success

  export_version:
    <<: *common
    title: Compare version to venonactl
    image: codefresh/semver
    commands:
    - export VENONACTL_VERSION=$(cat ./venonactl/VERSION)
    - export VENONA_VERSION=$(cat ./venona/VERSION)
    - echo "Venona version -> $VENONA_VERSION ---- Venonactl version -> $VENONACTL_VERSION"
    - semver-cli equal $VENONACTL_VERSION $VENONA_VERSION
    - cf_export VERSION=$VENONA_VERSION
    when:
      steps:
      - name: main_clone
        on:
        - success

  gofmt:
    <<: *common
    title: Run go-fmt
    commands:
      - cd venona && make test-fmt

  license:
    <<: *common
    title: Check License
    commands:
      - cd venona && make license

  spellcheck:
    <<: *common
    title: Spell Check
    commands:
      - cd venona && make spellcheck

  lint:
    <<: *common
    title: Run Go Lint
    commands:
      - cd venona && make lint

  code-security-scan:
    <<: *common
    title: Scan code security issues
    commands:
      - cd venona && make security-check

  gocyclo:
    <<: *common
    title: Run Gocyclo
    commands:
      - cd venona && make gocyclo


  codecov-report:
    type: codecov-reporter
    title: Upload Code Coverage
    stage: Build Artifacts
    arguments:
      codecov_integration: venona
    when:
      steps:
      - name: test
        on:
        - success

  build_image:
    type: build
    title: Build Docker Image
    stage: Build Artifacts
    tag: ${{CF_BRANCH_TAG_NORMALIZED}}
    dockerfile: Dockerfile
    disable_push: true
    working_directory: ${{WORKDIR}}
    image_name: ${{IMAGE_NAME}}
    when:
      steps:
      - name: main_clone
        on:
        - success

  run_arm_build:
    type: codefresh-run
    stage: Build Artifacts
    when:
      steps:
      - name: export_version
        on:
        - success
    arguments:
      PIPELINE_ID: ${{ARM_PIPELINE_ID}}
      DETACH: false
      TRIGGER_ID: venona-arm
      BRANCH: "${{CF_BRANCH}}"
      VARIABLE:
        - CF_REPO_OWNER=${{CF_REPO_OWNER}}
        - CF_REPO_NAME=${{CF_REPO_NAME}}
        - CF_REVISION=${{CF_REVISION}}
        - CF_BRANCH=${{CF_BRANCH}}
        - CF_BRANCH_TAG_NORMALIZED=${{CF_BRANCH_TAG_NORMALIZED}}
        - IMAGE_NAME=${{IMAGE_NAME}}
        - WORKDIR=${{WORKDIR}}
        - VERSION=${{VERSION}}
        - RELEASE_BRANCH_NAME=${{RELEASE_BRANCH_NAME}}
        - ARM_TAG_POSTFIX="${{ARM_TAG_POSTFIX}}"

  security_scan:
    stage: Security scan
    type: parallel
    when:
      steps:
        - name: build_image
          on:
          - success
    success_criteria:
      condition:
        any:
         secScanStep: aqua_scan.result == 'success' && snyk_scan.result == 'success'
         secScanFail: '"${{IGNORE_SEC_SCAN}}" == "true"'
    steps:
      aqua_scan:
        image: aquasec/trivy:latest
        title: "Scanning image for security vulnerablities"
        commands:
          - '! rm ${{SEC_SCAN_REPORT_FILE}} 2>/dev/null'
          - |-
            set -o pipefail
            trivy \
              --quiet \
              ${{IMAGE_NAME}}:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}} &> ${{SEC_SCAN_REPORT_FILE}}
            trivy \
              --quiet \
              --skip-update \
              --ignorefile /tmp/.trivy/trivyignore \
              --ignore-unfixed \
              --exit-code 1 \
              --severity ${{SEC_SCAN_SEVERITY_THRESHOLD}} \
              ${{IMAGE_NAME}}:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}}
        on_success:
          metadata:
            set:
              - '${{build_image.imageId}}':
                  - SECURITY_SCAN_AQUA: true

      snyk_scan:
        image: quay.io/codefresh/snyk-cli:${{SNYK_IMAGE_TAG}}
        title: "Scanning image for security vulnerablities"
        shell: bash
        working_directory: ${{main_clone}}/venona
        environment:
          - SNYK_TOKEN=${{SNYK_TOKEN}}
          - LOCAL_IMAGE_REF=${{IMAGE_NAME}}:${{CF_BRANCH_TAG_NORMALIZED_LOWER_CASE}}
        commands:
          - |
            snyk test --severity-threshold=${{SNYK_SEVERITY_THRESHOLD}} || fail=1
            snyk container test --severity-threshold=${{SNYK_SEVERITY_THRESHOLD}} --file=Dockerfile ${LOCAL_IMAGE_REF}
            if [ "$fail" == "1" ]; then exit 1; fi
        on_success:
          metadata:
            set:
              - '${{build_image.imageId}}':
                  - SECURITY_SCAN_SNYK: true

  upload_sec_scan_report:
    stage: Security scan
    image: mesosphere/aws-cli
    fail_fast: false
    when:
      steps:
        - name: security_scan
          on:
          - success
        - name: export_version
          on:
          - success
      branch:
        only: [ "${{RELEASE_BRANCH_NAME}}" ]
    environment:
      - AWS_ACCESS_KEY_ID=${{SEC_SCAN_AWS_KEY_ID}}
      - AWS_SECRET_ACCESS_KEY=${{SEC_SCAN_AWS_SECRET_KEY}}
    commands:
      - |-
        aws s3 cp \
        ${{SEC_SCAN_REPORT_FILE}} \
        s3://${{SEC_SCAN_S3_BUCKET}}/${{IMAGE_NAME}}/${{CF_REPO_NAME}}:${{VERSION}}.txt

  push_dev_image:
    type: push
    title: Push candidate image with dev tags
    stage: Push
    candidate: ${{build_image}}
    tags:
    - ${{VERSION}}-${{CF_BRANCH_TAG_NORMALIZED}}
    - ${{VERSION}}-${{CF_REVISION}}
    - ${{CF_REVISION}}
    - ${{CF_BRANCH_TAG_NORMALIZED}}
    image_name: ${{IMAGE_NAME}}
    when:
      branch:
        ignore: [ "${{RELEASE_BRANCH_NAME}}" ]
      steps:
      - name: build_image
        on:
        - success
      - name: export_version
        on:
        - success
    scale:
      push_quay_dev:
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
      push_dockerhub_dev:
        registry: "${{REGISTRY_INTEGRATION_DOCKERHUB}}"
      push_gcr_enterprise_dev:
        registry: "${{REGISTRY_INTEGRATION_ENTERPRISE}}"

  push_prod_image:
    type: push
    title: Push candidate image with prod tags
    stage: Push
    candidate: ${{build_image}}
    tags:
    - ${{VERSION}}
    - ${{VERSION}}-${{CF_BRANCH_TAG_NORMALIZED}}
    - ${{VERSION}}-${{CF_REVISION}}
    - ${{CF_REVISION}}
    - ${{CF_BRANCH_TAG_NORMALIZED}}
    - latest
    image_name: ${{IMAGE_NAME}}
    when:
      branch:
        only: [ "${{RELEASE_BRANCH_NAME}}" ]
      steps:
      - name: build_image
        on:
        - success
      - name: export_version
        on:
        - success
    scale:
      push_quay_prod:
        registry: "${{REGISTRY_INTEGRATION_QUAY}}"
      push_dockerhub_prod:
        registry: "${{REGISTRY_INTEGRATION_DOCKERHUB}}"
      push_gcr_enterprise_prod:
        registry: "${{REGISTRY_INTEGRATION_ENTERPRISE}}"

  create_manifest_list:
    stage: Push
    type: "codefresh-inc/multiarch-manifester"
    when:
      steps:
        - name: run_arm_build
          on:
          - success
      condition:
        any:
          pushProd: steps.push_prod_image.result == 'success'
          pushDev: steps.push_dev_image.result == 'success'
    arguments:
      image_name: ${{IMAGE_NAME}}
      tags:
        - ${{VERSION}}-${{CF_BRANCH_TAG_NORMALIZED}}
        - ${{VERSION}}-${{CF_REVISION}}
        - ${{CF_REVISION}}
        - ${{CF_BRANCH_TAG_NORMALIZED}}
      arch_tag_postfixes:
        arm64: "${{ARM_TAG_POSTFIX}}"
      registries:
        - name: 'quay.io'
          username: '${{QUAY_USERNAME}}'
          password: '${{QUAY_PASSWORD}}'
        - name: 'docker.io'
          username: '${{DOCKERHUB_USERNAME}}'
          password: '${{DOCKERHUB_PASSWORD}}'
        - name: 'gcr.io'
          path_prefix: codefresh-enterprise
          username: '${{GCR_USERNAME}}'
          password: '${{GCR_PASSWORD}}'
    scale:
      master_branch_tags:
        when:
          branch:
            only: [ "${{RELEASE_BRANCH_NAME}}" ]
          steps:
            - name: push_prod_image
              on:
              - success
        arguments:
          tags:
            - ${{VERSION}}
      dev_branches_tags:
        when:
          branch:
            ignore: [ "${{RELEASE_BRANCH_NAME}}" ]
          steps:
            - name: push_dev_image
              on:
              - success
