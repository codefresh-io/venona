version: '1.0'
mode: parallel
stages:
- Build & Test
- Release
steps:

  install_dependencies:
    title: 'Installing testing dependencies'
    image: codefresh/node-tester-image:10.13.0
    commands:
        - yarn install --frozen-lockfile --non-interactive
    when:
      steps:
      - name: main_clone
        on:
        - success

  calculate_version:
    title: 'Calculate latest version'
    image: codefresh/cli
    commands:
        - export VERSION=$(jq -r ".version" package.json)
        - cf_export VERSION
        # - export FILE_VERSION= $(cat ./venonactl/VERSION)
        - cf_export FILE_VERSION=$(cat ./venonactl/VERSION)
    when:
      steps:
      - name: main_clone
        on:
        - success

  validate_version:
    title: 'validate package version equal VERSION file'
    image: node:alpine
    commands:
        - if [ $VERSION != $FILE_VERSION ] ; then exit 1 ; else echo "version are equal"; fi;
    when:
      steps:
      - name: calculate_version
        on:
        - success

  eslint:
    title: 'Run eslint'
    image: codefresh/node-tester-image:10.13.0
    stage: Build & Test
    commands:
    - yarn lint
    when:
      steps:
      - name: install_dependencies
        on:
        - success
    
  test:
    title: 'Run tests'
    image: codefresh/node-tester-image:10.13.0
    stage: Build & Test
    commands:
    - yarn test
    when:
      steps:
      - name: install_dependencies
        on:
        - success
        
  build:
    title: "Building production image"
    type: build
    stage: Build & Test
    tag: ${{CF_BRANCH_TAG_NORMALIZED}}
    image_name: codefresh/venona
    when:
      steps:
      - name: install_dependencies
        on:
        - success

  push:
    title: "Pushing image to registry with short revision tag"
    stage: Release
    type: push
    candidate: ${{build}}
    tag: ${{CF_SHORT_REVISION}}
    registry: "dockerhub"
    when:
      steps:
        - name: build

  push_latest:
    title: "Pushing image to registry with latest tag"
    stage: Release
    type: push
    candidate: ${{build}}
    tags:
    - latest
    - ${{VERSION}}
    registry: "dockerhub"
    when:
      branch:
        only:
        - master
      steps:
        - name: build
          on:
          - success

  test_reporting_step:
    fail_fast: false
    title: "Generate test reporting"
    image: codefresh/cf-docker-test-reporting
    working_directory: '${{CF_VOLUME_PATH}}/venona/'
    environment:
     - REPORT_DIR=coverage
     - REPORT_INDEX_FILE=lcov-report/index.html
     - BUCKET_NAME=codefresh-test-report
     - CF_STORAGE_INTEGRATION=testReporting
    when:
      steps:
        - name: test
          on:
          - finished
          
  create_git_tag:
    title: Push tag to git
    image: codefresh/cli
    stage: Release
    commands:
    - export OLD_ORIGIN=$(git remote get-url origin)
    - git remote rm origin
    - git remote add origin https://${{GITHUB_TOKEN}}@github.com/codefresh-io/venona.git
    - git tag v${{VERSION}}
    - git push --tags
    - git remote rm origin
    - git remote add origin $OLD_ORIGIN
    
    fail_fast: false
    when:
      steps:
      - name: calculate_version
      - name: main_clone
      branch:
        only:
        - master
  
  release_binaries:
    title: Create release in Github with venona CLI
    image: golang:1.12-alpine
    stage: Release
    fail_fast: false
    commands:
    - cd venonactl
    - apk add git curl
    - curl -L https://github.com/goreleaser/goreleaser/releases/download/v0.118.1/goreleaser_Linux_x86_64.tar.gz | tar xz
    - mv goreleaser /bin/goreleaser
    - goreleaser release -f .goreleaser.yml --rm-dist --skip-validate
    when:
      steps:
      - name: create_git_tag
        on:
        - finished
      branch:
        only:
        - master

  build_binaries:
    title: Build binaries for all platforms - skip publish
    image: golang:1.12-alpine
    stage: Build & Test
    fail_fast: false
    commands:
    - cd venonactl
    - apk add git curl
    - curl -L https://github.com/goreleaser/goreleaser/releases/download/v0.118.1/goreleaser_Linux_x86_64.tar.gz | tar xz
    - mv goreleaser /bin/goreleaser
    - goreleaser release -f .goreleaser.yml --rm-dist --skip-validate --skip-publish
    when:
      steps:
      - name: main_clone
      branch:
        ignore:
        - master

  build_cli_image:
    title: "Building venona cli image"
    type: build
    stage: Build & Test
    tag: ${{CF_BRANCH_TAG_NORMALIZED}}
    working_directory: ${{main_clone}}/venonactl
    image_name: codefresh/venonacli
    when:
      steps:
      - name: release_binaries
        on:
        - success

  push_cli_image:
    title: "Push image with venona cli"
    stage: Release
    type: push
    candidate: ${{build_cli_image}}
    tags:
    - latest
    - ${{VERSION}}
    registry: "dockerhub"
    when:
      steps:
        - name: build_cli_image
          on:
          - success